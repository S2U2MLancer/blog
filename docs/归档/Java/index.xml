<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on Slancer</title>
    <link>/%E5%BD%92%E6%A1%A3/Java/</link>
    <description>Recent content in Java on Slancer</description>
    <generator>Hugo -- gohugo.io</generator>
    <managingEditor>xiayy860612@126.com (Slancer)</managingEditor>
    <webMaster>xiayy860612@126.com (Slancer)</webMaster>
    <lastBuildDate>Sun, 01 Jul 2018 19:50:13 +0800</lastBuildDate>
    
	<atom:link href="/%E5%BD%92%E6%A1%A3/Java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>NIO介绍</title>
      <link>/%E5%BD%92%E6%A1%A3/Java/NIO%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Sun, 01 Jul 2018 18:32:37 +0800</pubDate>
      <author>xiayy860612@126.com (Slancer)</author>
      <guid>/%E5%BD%92%E6%A1%A3/Java/NIO%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/</guid>
      <description>作者: yangxue demo: https://github.com/mypennyXue/JavaStudy 参考: http://ifeve.com/java-nio-all/  标准的IO基于字节流和字符流进行操作的，而NIO是基于通道（Channel）和缓冲区（Buffer）进行操作， 数据总是从通道读取到缓冲区中，或者从缓冲区写入到通道中。 NIO可以工作在非阻塞模式下
NIO 核心组件  Buffer Channel select  数据流： 主要的 channel：  FileChannel 从文件中读写数据 DatagramChannel 能通过UDP读写网络中的数据 SocketChannel 能通过TCP读写网络中的数据 （类似于Socket） ServerSocketChannel 可以监听新进来的TCP连接 Buffer类型 ByteBuffer
 CharBuffer
 DoubleBuffer
 FloatBuffer
 IntBuffer
 LongBuffer
 ShortBuffer
  Buffer 三大属性： capacity（buffer容量） limit(下一个读取的位置) position（下一个写入的位置）
Buffer的读写模式： 使用Buffer读写数据一般遵循以下四个步骤：
 写入数据到Buffer 调用flip()方法 从Buffer中读取数据 调用clear()方法或者compact()方法  Selector： Selector 可以监听的事件 事件 常量
 Connect SelectionKey.OP_CONNECT Accept SelectionKey.</description>
    </item>
    
  </channel>
</rss>